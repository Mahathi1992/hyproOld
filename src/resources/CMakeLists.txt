
# initialize lists for include directories and library files
set(${PROJECT_NAME}_INCLUDE_DIRS "" CACHE STRING "Include directories var")

add_custom_target(hypro_resources)
add_dependencies(${PROJECT_NAME} hypro_resources)
set(RESSOURCES_FLAGS "-Wno-error ${CMAKE_CXX_FLAGS} -Wno-error" )
#message("Ressoures flags: ${RESSOURCES_FLAGS}")

# Load modules
include(ExternalProject)
include(FetchContent)
if(DEVELOPER)
	include(CMakePrintHelpers)
endif()

# Set default ExternalProject root directory
set(EP_PREFIX_DIR ${CMAKE_BINARY_DIR}/resources )
set_directory_properties(PROPERTIES EP_PREFIX ${EP_PREFIX_DIR} )


#load_library_static_shared(${PROJECT_NAME} carl 0)
find_package(carl)
if(carl_FOUND)
	message(STATUS "Use system version of CArL version ${carl_VERSION}")
	find_package(carl CONFIG) # search for carl in config mode to locate the file carlConfig.cmake
	message(STATUS "carl config folder: ${carl_DIR}")
	include(${carl_DIR}/carlConfig.cmake)
	add_library(carl_STATIC ALIAS carl-static)
	add_library(carl_SHARED ALIAS carl-shared)

	include(carlVersionMacros)
	export_target(DEPENDENT_TARGETS GMPXX_SHARED)
	export_target(DEPENDENT_TARGETS GMPXX_STATIC GMP_STATIC)
	export_target(DEPENDENT_TARGETS EIGEN3)
	if(CARL_LOGGING_POST_1910)
		message(STATUS "Export carl-logging")
		export_target(DEPENDENT_TARGETS carl-logging-shared)
		export_target(DEPENDENT_TARGETS carl-logging-static)
	endif()
	get_target_property(libs carl_SHARED INTERFACE_LINK_LIBRARIES)
	# filter only non-system libs (post-fixed with "SHARED")
	list(FILTER libs INCLUDE REGEX ".*_SHARED")
	foreach(item ${libs})
		export_target(DEPENDENT_TARGETS ${item})
	endforeach()
	get_target_property(libs carl_STATIC INTERFACE_LINK_LIBRARIES)
	# filter only non-system libs (post-fixed with "STATIC")
	list(FILTER libs INCLUDE REGEX ".*_STATIC")
	foreach(item ${libs})
		export_target(DEPENDENT_TARGETS ${item})
	endforeach()

	export_target(DEPENDENT_TARGETS carl_SHARED)
	export_target(DEPENDENT_TARGETS carl_STATIC)

	set(DEPENDENT_TARGETS ${DEPENDENT_TARGETS} PARENT_SCOPE)
	build_target_include_dirs_from(${PROJECT_NAME}-objects SYSTEM PUBLIC carl_SHARED GMPXX_SHARED GMP_SHARED Boost_system_SHARED BLISS_SHARED COCOA_SHARED)
	target_link_libraries(${PROJECT_NAME}-static PUBLIC carl_STATIC)
	build_target_include_dirs_from(${PROJECT_NAME}-static SYSTEM INTERFACE carl_STATIC)
	foreach(item  GMPXX_STATIC GMP_STATIC Boost_system_STATIC BLISS_STATIC COCOA_STATIC)
		target_link_libraries(${PROJECT_NAME}-static PUBLIC ${item})
		if(NOT TARGET ${item})
			get_target_property(include ${item} INTERFACE_INCLUDE_DIRECTORY)
			get_target_property(lib ${item} IMPORTED_LOCATION)
			add_library(${item} STATIC IMPORTED GLOBAL)
			set_target_properties(${item} PROPERTIES IMPORTED_LOCATION "${lib}")
			set_target_properties(${item} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${include}")
		endif()
	endforeach()
	target_link_libraries(${PROJECT_NAME}-shared PUBLIC carl_SHARED)
	build_target_include_dirs_from(${PROJECT_NAME}-shared SYSTEM INTERFACE carl_SHARED)
	foreach(item  GMPXX_SHARED GMP_SHARED Boost_system_SHARED BLISS_SHARED COCOA_SHARED)
		target_link_libraries(${PROJECT_NAME}-shared PUBLIC ${item})
		if(NOT TARGET ${item})
			get_target_property(include ${item} INTERFACE_INCLUDE_DIRECTORY)
			get_target_property(lib ${item} IMPORTED_LOCATION)
			add_library(${item} SHARED IMPORTED GLOBAL)
			set_target_properties(${item} PROPERTIES IMPORTED_LOCATION "${lib}")
			set_target_properties(${item} PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${include}")
		endif()
	endforeach()
else()
	message("-- Download version of CArL")
	include(carl.cmake)
	include(carlVersionMacros)
endif()
set(CARL_OLD_INTERVALS ${CARL_OLD_INTERVALS} PARENT_SCOPE)
set(CARL_OLD_STRUCTURE ${CARL_OLD_STRUCTURE} PARENT_SCOPE)
set(CARL_POLY_MEMBER_SUBSTITUTE ${CARL_POLY_MEMBER_SUBSTITUTE} PARENT_SCOPE)
set(CARL_LOGGING_POST_1910 ${CARL_LOGGING_POST_1910} PARENT_SCOPE)


if(GTEST_FOUND)
	set(GTEST_LIBRARIES ${GTEST_LIBRARY} ${GTEST_MAIN_LIBRARY} PARENT_SCOPE)
	message(STATUS "Use system version of GTest")
else()
	message(STATUS "Download version of GTest")
	include(gtest.cmake)
endif()

include(glpk.cmake)

if(HYPRO_USE_MIMALLOC)
	include(mimalloc.cmake)
endif()

if(HYPRO_USE_CLP)
	message(STATUS "Use clp")
	include(clp.cmake)
endif()

find_package(UUID QUIET REQUIRED)
if(NOT UUID_FOUND)
	message(SEND_ERROR "Package uuid-dev required to build antlr.")
endif()

if(HYPRO_MATLAB_BINDINGS)
	include(matlab.cmake)
endif()

#include external cmake file
include(ExternalAntlr4Cpp.cmake)

# # # # # # # # # # # # # # # # # # # # # #
# C.2. Optional libraries
# # # # # # # # # # # # # # # # # # # # # #

if(HYPRO_USE_COTIRE)
	# We use cotire, simply include it
	message(STATUS "using cotire")
	include(cotire)
	cotire(${PROJECT_NAME}-shared)
	cotire(${PROJECT_NAME}-static)
else()
	# We do not use cotire, create dummy function in case cotire is used somewhere
	message(STATUS "not using cotire")
	function(cotire)
	endfunction(cotire)
endif()

if(HYPRO_USE_PPL)
	load_library(${PROJECT_NAME} PPL 0)
endif()

if(HYPRO_USE_SMTRAT)
	find_package(smtrat)
	target_link_libraries(${PROJECT_NAME}-shared PUBLIC smtrat-solver-shared smtrat-module-LRAModule-shared)
	target_link_libraries(${PROJECT_NAME}-static PUBLIC smtrat-solver-static smtrat-module-LRAModule-static)
endif()

if(HYPRO_USE_Z3)
	load_library(${PROJECT_NAME} z3 0)
	if(NOT z3_FOUND)
		message(STATUS "Downloading Z3")
		include(z3.cmake)
	endif()
    target_link_libraries(${PROJECT_NAME}-shared PUBLIC z3_SHARED)
endif()

if(HYPRO_USE_SOPLEX)
	load_library(${PROJECT_NAME} soplex 0)
	target_link_libraries(${PROJECT_NAME}-shared PUBLIC ${soplex_LIBRARY} -lz)
	target_link_libraries(${PROJECT_NAME}-static PUBLIC ${soplex_LIBRARY} -lz)
endif()

if(HYPRO_USE_OPENMP)
	load_library(${PROJECT_NAME} OpenMP 0)
	if(OPENMP_FOUND)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
	endif()
endif()
